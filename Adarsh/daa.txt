#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int V;

vector<vector<int>> graph;
void printSolution(int color[])
{
	cout << " Assigned colors : "
		<< "\n";
	for(int i = 0; i < V; i++)
		cout << " " << color[i] << " ";
		
	cout<<endl;
}
bool isSafe(int v,
			int color[], int c)
{
	for(int i = 0; i < V; i++)
		if (graph[v][i] && c == color[i])
			return false;
			
	return true;
}

bool graphColoringUtil(int m,
					int color[], int v)
{

	if (v == V)
		return true;

	for(int c = 1; c <= m; c++)
	{
		
		if (isSafe(v,color, c))
		{
			color[v] = c;

			if (graphColoringUtil(
				m, color, v + 1) == true)
				return true;

			color[v] = 0;
		}
	}

	return false;
}

bool graphColoring(int m)
{
	
	int color[V];
	for(int i = 0; i < V; i++)
		color[i] = 0;

	if (graphColoringUtil(m, color, 0) == false)
	{
		cout << "Solution does not exist";
		return false;
	}

	printSolution(color);
	return true;
}


int main()
{   cin>>V;//4
    int m;
    cin>>m;//3
    for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
            bool a;
            cin>>a;
            graph[i].push_back(j);
        }
    }
/*	graph[V][V] = { { 0, 1, 1, 1 },
						{ 1, 0, 1, 0 },
						{ 1, 1, 0, 1 },
						{ 1, 0, 1, 0 }};*/
	graphColoring(m);
	return 0;
}

